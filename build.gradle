plugins {
	id 'org.springframework.boot' version '2.7.1'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'java'
	id 'eclipse'
	id 'application'
	id 'jacoco'
	id "org.sonarqube" version "3.5.0.2730"
}


group = 'pe.gob.sunarp.app.solicitud'
version = '1.0.0'

repositories {
	mavenCentral()
	maven {
		url ("https://maven.oracle.com")
	}
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
	/*
	maven { url "https://plugins.gradle.org/m2/" }
	*/
}

ext {
	springCloudVersion = 'Finchley.RELEASE'
}

ext {
	set('springCloudVersion', "Greenwich.SR6")
}

dependencies {
//===============================SPRING BOOT=====================================================
	implementation group: 'org.springframework.security.oauth.boot', name: 'spring-security-oauth2-autoconfigure'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
	implementation group: 'org.springframework.security', name: 'spring-security-jwt', version: '1.0.9.RELEASE'

	implementation('org.springframework.boot:spring-boot-starter-web')
	testImplementation('org.springframework.boot:spring-boot-starter-test') 


//==============================CONEXION JDBC POOL DE CONEXIONES===================================

	implementation files('libs/ojdbc8.jar')

	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: '2.1.1.RELEASE'
	implementation group: 'org.springframework.data', name: 'spring-data-oracle', version: '2.0.0.M1'

	//======================COMPLEMENTARIOS=====================================
	implementation group: 'org.json', name: 'json', version: '20201115'
	compileOnly 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'

	implementation group: 'log4j', name: 'log4j', version: '1.2.17'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.7'


	//==============================REDIS===============================================================
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'

	//======================MAPSTRUCT=====================================
	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
	annotationProcessor  'org.mapstruct:mapstruct-processor:1.4.2.Final'

	//======================ENVIO CORREO=====================================
	implementation group: 'javax.mail', name: 'mail', version: '1.4.7'

	//=============================================IREPORT=======================================================
	implementation group: 'net.sf.jasperreports', name: 'jasperreports', version: '6.11.0'
	implementation group: 'com.lowagie', name: 'itext', version: '2.1.7'

}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
tasks.withType(JavaCompile) {
    options.warnings = false
}

bootJar {
    archiveFileName = "mi-aplicacion.jar"
}

sonar {
  properties {
    property "sonar.projectKey", "solicitud"
  }
}


//tasks.named('test') {
//	useJUnitPlatform()
//}
test {
    jacoco {
        destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
        classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
    }
}
jacocoTestReport {
    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

/*
test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
}


jacocoTestReport {
    reports {
        csv.required.set( true)
    }
}

check.dependsOn jacocoTestReport
*/

/*
jacoco {
    toolVersion = "0.8.5"

}

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport
  jacoco {
	includeNoLocationClasses = true
	excludes = ["jdk.internal.*"]
  }

}
jacocoTestReport {
    reports {
        csv.required.set( true)
    }
}
*/
/*
jacocoTestReport {
    dependsOn test
	reports {
            xml.required.set(true)
            html.required.set(false)
            csv.required.set(false)
            xml.destination file("${buildDir}/reports/jacoco.xml")
        }
}

*/


// check.dependsOn jacocoTestReport
